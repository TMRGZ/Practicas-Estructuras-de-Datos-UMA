tests for: Humpty Dumpty sat on a wall, Humpty Dumpty had a great fall all the king's horses and all the king's men couldn't put Humpty together again

Exercise 1 - weights:
AVLDictionary( ->25,'->3,,->1,D->2,H->3,a->12,c->1,d->3,e->7,f->1,g->5,h->5,i->3,k->2,l->9,m->6,n->7,o->4,p->6,r->3,s->5,t->13,u->7,w->1,y->5)

Exercise 2.a - leaves:
BinaryHeapPriorityQueue((,, 1),(f, 1),(c, 1),(w, 1),(D, 2),(k, 2),(d, 3),(H, 3),(r, 3),(i, 3),(', 3),(o, 4),(y, 5),(g, 5),(s, 5),(h, 5),(m, 6),(p, 6),(e, 7),(u, 7),(n, 7),(l, 9),(a, 12),(t, 13),( , 25))

Exercise 2.b - huffman tree with one priority queue:
            ( , 25)
        49
                    (p, 6)
                12
                    (m, 6)

            24
                        (r, 3)
                    6
                        (d, 3)

                12
                        (i, 3)
                    6
                        (H, 3)




    86
                    (h, 5)
                10
                    (s, 5)

            20
                    (g, 5)
                10
                    (y, 5)


        37
                (l, 9)
            17
                            (w, 1)
                        2
                            (c, 1)

                    4
                        (D, 2)

                8
                        (k, 2)
                    4
                            (f, 1)
                        2
                            (,, 1)






139
                (u, 7)
            14
                    (o, 4)
                7
                    (', 3)


        28
                (n, 7)
            14
                (e, 7)


    53
            (t, 13)
        25
            (a, 12)



Exercise 2.c - huffman tree with two queues:
            ( , 25)
        49
                    (p, 6)
                12
                    (m, 6)

            24
                (a, 12)


    86
                    (h, 5)
                10
                    (s, 5)

            20
                    (g, 5)
                10
                    (y, 5)


        37
                (l, 9)
            17
                            (w, 1)
                        2
                            (c, 1)

                    4
                            (f, 1)
                        2
                            (,, 1)


                8
                        (k, 2)
                    4
                        (D, 2)





139
                    (o, 4)
                7
                    (', 3)

            14
                (n, 7)

        28
                (u, 7)
            14
                (e, 7)


    53
            (t, 13)
        25
                    (i, 3)
                6
                    (r, 3)

            12
                    (H, 3)
                6
                    (d, 3)





Exercise 3.a - join dictionaries:
d1: AVLDictionary(a->LinkedList(1,2),c->LinkedList(3,4))
d2: AVLDictionary(b->LinkedList(5,6),d->LinkedList(7,8))
join(d1,d2): AVLDictionary(a->LinkedList(1,2),b->LinkedList(5,6),c->LinkedList(3,4),d->LinkedList(7,8))

Exercise 3.b - prefix with:
prefix d1 with 0: AVLDictionary(a->LinkedList(0,1,2),c->LinkedList(0,3,4))
prefix d2 with 1: AVLDictionary(b->LinkedList(1,5,6),d->LinkedList(1,7,8))

Exercise 4 - encode:
using the huffman tree built with one priority queue:
LinkedList(1,1,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,0,1,1,0,0,1,1,0,1,0,0,1,1,1,1,0,0,0,1,0,0,1,1,1,1,1,0,1,0,1,1,0,1,1,0,0,1,1,0,1,0,0,1,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1,0,1,1,0,1,0,1,0,1,1,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,0,1,1,0,0,1,1,0,1,0,0,1,1,1,1,0,0,0,1,0,0,1,1,1,1,1,0,1,0,1,1,0,1,1,0,0,1,1,0,1,0,0,1,1,1,1,0,1,1,1,0,0,0,1,1,0,0,1,0,1,1,1,0,0,0,1,1,1,1,0,1,0,1,1,1,0,0,1,1,0,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,1,1,1,1,0,0,0,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,1,1,1,0,1,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,0,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,1,1,1,0,1,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,1,1,1,1,0,1,0,0,1,0,0,0,1,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,1,0,1,1,1,1,0,0,1,1,1,0,0,1,0,0,1,0,1,0,1,1,0,0,0,0,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,0,1,1,0,0,1,1,0,1,0,0,1,1,1,0,0,1,0,1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1,1,0,1,1,1,0,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,0,1,0,1,0,0,0,1,1,0,0,0,1,0,1,0,1)
using the huffman tree built with two queues:
LinkedList(0,0,0,0,1,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,1,1,0,1,0,0,1,1,1,1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,1,1,0,1,0,0,1,1,1,1,0,1,1,0,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,1,1,0,0,0,0,1,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,1,1,0,1,0,0,1,1,1,1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,1,1,0,1,0,0,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,0,1,1,1,0,0,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,1,1,1,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,0,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,1,0,1,0,1,1,0,0,1,0,0,1,0,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,1,1,1,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,0,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,1,0,1,0,0,1,0,0,0,1,1,0,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,0,1,0,1,0,0,1,1,1,1,0,0,0,0,1,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,1,1,0,1,0,0,1,1,1,0,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,0,0,0,1,1,0,1,1,1,0,1,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,0,1,0,1,1,1,0,0,0,0,0,1,1,0,1,1,0)

Exercise 5 - decode:
using the huffman tree built with one priority queue:
Humpty Dumpty sat on a wall, Humpty Dumpty had a great fall all the king's horses and all the king's men couldn't put Humpty together again
decoding OK!
using the huffman tree built with two queues:
Humpty Dumpty sat on a wall, Humpty Dumpty had a great fall all the king's horses and all the king's men couldn't put Humpty together again
decoding OK!

Exercise 6 - TODO

Exercise 7.a - serialize:
serialize the huffman tree built with one priority queue:
LinkedList(0,0,0,1,97,1,116,0,0,1,101,1,110,0,0,1,39,1,111,1,117,0,0,0,0,0,0,1,44,1,102,1,107,0,1,68,0,1,99,1,119,1,108,0,0,1,121,1,103,0,1,115,1,104,0,0,0,0,1,72,1,105,0,1,100,1,114,0,1,109,1,112,1,32)
serialize the huffman tree built with two queues:
LinkedList(0,0,0,0,0,1,100,1,72,0,1,114,1,105,1,116,0,0,1,101,1,117,0,1,110,0,1,39,1,111,0,0,0,0,0,1,68,1,107,0,0,1,44,1,102,0,1,99,1,119,1,108,0,0,1,121,1,103,0,1,115,1,104,0,0,1,97,0,1,109,1,112,1,32)

Exercise 7.b - deserialize:
deserialize the huffman tree built with one priority queue:
original tree:
            ( , 25)
        49
                    (p, 6)
                12
                    (m, 6)

            24
                        (r, 3)
                    6
                        (d, 3)

                12
                        (i, 3)
                    6
                        (H, 3)




    86
                    (h, 5)
                10
                    (s, 5)

            20
                    (g, 5)
                10
                    (y, 5)


        37
                (l, 9)
            17
                            (w, 1)
                        2
                            (c, 1)

                    4
                        (D, 2)

                8
                        (k, 2)
                    4
                            (f, 1)
                        2
                            (,, 1)






139
                (u, 7)
            14
                    (o, 4)
                7
                    (', 3)


        28
                (n, 7)
            14
                (e, 7)


    53
            (t, 13)
        25
            (a, 12)


rebuilt tree:
            ( , 0)
        0
                    (p, 0)
                0
                    (m, 0)

            0
                        (r, 0)
                    0
                        (d, 0)

                0
                        (i, 0)
                    0
                        (H, 0)




    0
                    (h, 0)
                0
                    (s, 0)

            0
                    (g, 0)
                0
                    (y, 0)


        0
                (l, 0)
            0
                            (w, 0)
                        0
                            (c, 0)

                    0
                        (D, 0)

                0
                        (k, 0)
                    0
                            (f, 0)
                        0
                            (,, 0)






0
                (u, 0)
            0
                    (o, 0)
                0
                    (', 0)


        0
                (n, 0)
            0
                (e, 0)


    0
            (t, 0)
        0
            (a, 0)


deserialize the huffman tree built with two queues:
original tree:
            ( , 25)
        49
                    (p, 6)
                12
                    (m, 6)

            24
                (a, 12)


    86
                    (h, 5)
                10
                    (s, 5)

            20
                    (g, 5)
                10
                    (y, 5)


        37
                (l, 9)
            17
                            (w, 1)
                        2
                            (c, 1)

                    4
                            (f, 1)
                        2
                            (,, 1)


                8
                        (k, 2)
                    4
                        (D, 2)





139
                    (o, 4)
                7
                    (', 3)

            14
                (n, 7)

        28
                (u, 7)
            14
                (e, 7)


    53
            (t, 13)
        25
                    (i, 3)
                6
                    (r, 3)

            12
                    (H, 3)
                6
                    (d, 3)




rebuilt tree:
            ( , 0)
        0
                    (p, 0)
                0
                    (m, 0)

            0
                (a, 0)


    0
                    (h, 0)
                0
                    (s, 0)

            0
                    (g, 0)
                0
                    (y, 0)


        0
                (l, 0)
            0
                            (w, 0)
                        0
                            (c, 0)

                    0
                            (f, 0)
                        0
                            (,, 0)


                0
                        (k, 0)
                    0
                        (D, 0)





0
                    (o, 0)
                0
                    (', 0)

            0
                (n, 0)

        0
                (u, 0)
            0
                (e, 0)


    0
            (t, 0)
        0
                    (i, 0)
                0
                    (r, 0)

            0
                    (H, 0)
                0
                    (d, 0)




