tests for: te estoy amando locamente pero no se como te lo voy a decir quisiera que me comprendieras y sin darte cuenta te alejas de mi

Exercise 1 - weights:
AVLDictionary( ->24,a->10,c->5,d->5,e->18,i->6,j->1,l->3,m->6,n->6,o->10,p->2,q->2,r->6,s->6,t->7,u->3,v->1,y->3)

Exercise 2.a - leaves:
BinaryHeapPriorityQueue((j, 1),(v, 1),(p, 2),(q, 2),(y, 3),(l, 3),(u, 3),(d, 5),(c, 5),(r, 6),(s, 6),(n, 6),(m, 6),(i, 6),(t, 7),(o, 10),(a, 10),(e, 18),( , 24))

Exercise 2.b - huffman tree with one priority queue:
                    (i, 6)
                12
                    (m, 6)

            22
                (o, 10)

        42
                (a, 10)
            20
                    (c, 5)
                10
                    (d, 5)



    76
            (e, 18)
        34
                        (u, 3)
                    5
                        (q, 2)

                9
                            (v, 1)
                        2
                            (j, 1)

                    4
                        (p, 2)


            16
                (t, 7)



124
                (n, 6)
            12
                (s, 6)

        24
                    (l, 3)
                6
                    (y, 3)

            12
                (r, 6)


    48
        ( , 24)


Exercise 2.c - huffman tree with two queues:
                    (s, 6)
                12
                    (r, 6)

            22
                        (y, 3)
                    5
                            (v, 1)
                        2
                            (j, 1)


                10
                    (c, 5)


        42
                (a, 10)
            20
                (o, 10)


    76
            (e, 18)
        34
                    (d, 5)
                9
                        (q, 2)
                    4
                        (p, 2)


            16
                (t, 7)



124
                    (u, 3)
                6
                    (l, 3)

            12
                (i, 6)

        24
                (m, 6)
            12
                (n, 6)


    48
        ( , 24)


Exercise 3.a - join dictionaries:
d1: AVLDictionary(a->LinkedList(1,2),c->LinkedList(3,4))
d2: AVLDictionary(b->LinkedList(5,6),d->LinkedList(7,8))
join(d1,d2): AVLDictionary(a->LinkedList(1,2),b->LinkedList(5,6),c->LinkedList(3,4),d->LinkedList(7,8))

Exercise 3.b - prefix with:
prefix d1 with 0: AVLDictionary(a->LinkedList(0,1,2),c->LinkedList(0,3,4))
prefix d2 with 1: AVLDictionary(b->LinkedList(1,5,6),d->LinkedList(1,7,8))

Exercise 4 - encode:
using the huffman tree built with one priority queue:
LinkedList(1,0,0,0,1,0,1,0,0,1,0,1,0,1,1,0,1,0,0,0,1,1,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,1,0,1,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,1,0,1,0,0,1,1,0,0,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,1,1,0,0,0,1,0,0,1,0,1,1,1,1,1,0,0,1,0,1,0,0,0,1,1,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,0,1,1,1,1,1,1,0,1,0,0,0,0,1,0,0,1,1,0,1,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,0,1,1,0,1,0,0,1,1,1,1,0,1,0,0,1,1,1,1,0,1,0,1,0,0,1,1,0,0,1,1,1,1,0,1,1,1,1,0,1,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,0,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,0,1,1,0,1,0,1,0,0,1,0,0,0,1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,0,1,0,1,1,1,1,0,0,0,1,1,0,1,0,0,1,0,0,0,1,0,1,0,0,1,1,0,1,0,1,0,1,1,1,0,1,1,0,0,1,0,1,0,1,1,0,1,0,1,1,0,0,0,1,1,0,0,0,1,0,1,0,0,1,1,1,1,0,1,1,1,1,1)
using the huffman tree built with two queues:
LinkedList(1,0,0,0,1,0,1,0,0,1,0,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,1,0,1,0,1,1,1,0,1,0,1,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,1,1,0,1,0,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,1,1,1,1,1,0,1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,0,1,1,1,0,0,1,1,0,0,0,1,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,1,1,0,1,1,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,1,0,0,1,0,0,1,1,1,0,1,1,1,1,0,0,0,1,1,0,1,1,1,1,0,0,0,1,0,0,1,0,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1,1,0,1,0,0,1,0,0,1,0,1,0,1,1,1,1,1,0,1,0,0,0,1,0,1,1,0,1,0,0,1,1,1,0,0,1,1,0,0,0,1,0,1,1,0,0,1,0,0,1,1,1,1,0,1,0,1,0,1,0,0,1,0,0,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,0,1,1,0,0,1,0,0,0,0,1,0,0,1,1,1,1,0,1,1,1,1,1,0,1,0,0,0,1,0,1,0,0,1,1,1,0,0,0,1,1,1,1,1,0,1,0,1,0,0,1,0,0,0,1,1,0,1,0,0,1,0,0,0,1,0,1,0,0,1,1,0,1,0,1,1,1,0,1,0,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,1,0,0,0,1,0,1,0,1,1,0)

Exercise 5 - decode:
using the huffman tree built with one priority queue:
te estoy amando locamente pero no se como te lo voy a decir quisiera que me comprendieras y sin darte cuenta te alejas de mi
decoding OK!
using the huffman tree built with two queues:
te estoy amando locamente pero no se como te lo voy a decir quisiera que me comprendieras y sin darte cuenta te alejas de mi
decoding OK!

Exercise 6 - TODO

Exercise 7.a - serialize:
serialize the huffman tree built with one priority queue:
LinkedList(0,0,1,32,0,0,1,114,0,1,121,1,108,0,1,115,1,110,0,0,0,1,116,0,0,1,112,0,1,106,1,118,0,1,113,1,117,1,101,0,0,0,1,100,1,99,1,97,0,1,111,0,1,109,1,105)
serialize the huffman tree built with two queues:
LinkedList(0,0,1,32,0,0,1,110,1,109,0,1,105,0,1,108,1,117,0,0,0,1,116,0,0,1,112,1,113,1,100,1,101,0,0,1,111,1,97,0,0,1,99,0,0,1,106,1,118,1,121,0,1,114,1,115)

Exercise 7.b - deserialize:
deserialize the huffman tree built with one priority queue:
original tree:
                    (i, 6)
                12
                    (m, 6)

            22
                (o, 10)

        42
                (a, 10)
            20
                    (c, 5)
                10
                    (d, 5)



    76
            (e, 18)
        34
                        (u, 3)
                    5
                        (q, 2)

                9
                            (v, 1)
                        2
                            (j, 1)

                    4
                        (p, 2)


            16
                (t, 7)



124
                (n, 6)
            12
                (s, 6)

        24
                    (l, 3)
                6
                    (y, 3)

            12
                (r, 6)


    48
        ( , 24)

rebuilt tree:
                    (i, 0)
                0
                    (m, 0)

            0
                (o, 0)

        0
                (a, 0)
            0
                    (c, 0)
                0
                    (d, 0)



    0
            (e, 0)
        0
                        (u, 0)
                    0
                        (q, 0)

                0
                            (v, 0)
                        0
                            (j, 0)

                    0
                        (p, 0)


            0
                (t, 0)



0
                (n, 0)
            0
                (s, 0)

        0
                    (l, 0)
                0
                    (y, 0)

            0
                (r, 0)


    0
        ( , 0)

deserialize the huffman tree built with two queues:
original tree:
                    (s, 6)
                12
                    (r, 6)

            22
                        (y, 3)
                    5
                            (v, 1)
                        2
                            (j, 1)


                10
                    (c, 5)


        42
                (a, 10)
            20
                (o, 10)


    76
            (e, 18)
        34
                    (d, 5)
                9
                        (q, 2)
                    4
                        (p, 2)


            16
                (t, 7)



124
                    (u, 3)
                6
                    (l, 3)

            12
                (i, 6)

        24
                (m, 6)
            12
                (n, 6)


    48
        ( , 24)

rebuilt tree:
                    (s, 0)
                0
                    (r, 0)

            0
                        (y, 0)
                    0
                            (v, 0)
                        0
                            (j, 0)


                0
                    (c, 0)


        0
                (a, 0)
            0
                (o, 0)


    0
            (e, 0)
        0
                    (d, 0)
                0
                        (q, 0)
                    0
                        (p, 0)


            0
                (t, 0)



0
                    (u, 0)
                0
                    (l, 0)

            0
                (i, 0)

        0
                (m, 0)
            0
                (n, 0)


    0
        ( , 0)

